[서브클래싱]
윈도우 생성에 가장 중요한 정보는 윈도우 프로시저의 주소이다.
윈도우 프로시저의 주소는 윈도우를 생성할 때 별도의 클래스에 보관되는 것이 아니라 윈도우별로 별도로 보관된다.
시스템은 윈도우를 생성할 때 별도의 메모리를 할당하고 윈도우 클래스의 정보를 이 메모리로 복사한다.
사용자로부터 메시지가 입력되면 운영체제는 메시지를 받는 윈도우의 윈도우 프로시저 주소를 조사한 후
조사된 주소로 메시지를 보내고 윈도우 프로시저는 이 메시지를 받아 윈도우 고유의 처리를 한다.

SubClassing이란?
: 윈도우 프로시저로 전달되는 메시지를 중간에 가로채는 기법이다.
중간에서 메시지를 조작함으로써 윈도우 모양을 변경하거나 동작을 감시할 수 있다.
새로운 윈도우 프로시저 함수를 만들어 두고 
특정 윈도우의 윈도우 프로시저 주소를 새로 만든 윈도우 프로시저의 주소로 변경하면
모든 메시지는 새로 만든 윈도우 프로시저로 전달된다.
이때 새로 만든 윈도우 프로시저를 서브클래스 프로시저(Subclass Procedure)라고 한다.
단, 주소를 변경하기 전에 원래 윈도우 프로시저 주소를 보관해 두었다가
서브클래스 프로시저에서 처리되지 않은 메시지는 반드시 원래 윈도우 프로시저로 전달해야 한다.

특징.
1. 통과 : 자신이 처리할 수 없거나 관심이 없는 메시지는 그냥 원래의 윈도우 프로시저로 전달한다.
원래의 윈도우 프로시저는 아무일 없었다는 듯이 자신의 방식대로 메시지를 디폴트 처리할 것이다.
서버클래스 프로시저가 단순히 중계역할을 할 뿐이며 이 경우는 윈도우에 어떠한 변화도 없다.

2. 직접 처리 : 원하는 메시지가 왔을 때 자신이 직접 처리하며 윈도우 프로시저로는 보내지 않고 그냥 리턴해 버린다.
원래의 윈도우 프로시저가 메시지를 처리하는 방법과는 다르게 메시지를 처리함으로써 윈도우의 모양이나 동작이 변경될 수 있다.

3. 변형 : 메시지를 변경한 후 다시 원래의 윈도우 프로시저로 보낸다. 특정 메시지를 다른 메시지로 
변경한다거나 메시지의 인수(wParam, lParam)를 다른 값으로 바꾼 후 윈도우 프로시저로 보내는 방법을 우선 생각할 수 있다.
예를 들어 키보드 메시지를 받았을 떄 눌러진 키가 커서 이동 키이면 이를 스크롤 메시지로 바꾸는 것이 가능하다. 
이외에 메시지를 처리하기 전이나 후에 특별한 다른 처리를 할 수도 있다.

서브클래싱의 대상이 되는 윈도우에는 제한이 없다. 자신이 직접 만든 클래스는 물론이고 에디트나 버튼 등의 
시스템 전역 클래스에 속한 윈도우도 서브클래싱의 대상이다. 그래서 표준 컨트롤의 동작을 필요에 따라 수정할 수 있다.
단, 어떤 경우에는 특별한 제한이 있을 수도 있는데 몇 가지 사항만 주의하면 된다.


[SubEdit]
에디트 서브클래싱 예제
에디트 컨트롤은 스스로 메시지를 처리하며 기능적으로 독립적이기 때문에
혼자서도 문자열을 입력받는데 아무 무리가 없다. CreateWindow 함수로 컨트롤만 만들어 놓으면
키보드 입력, 선택, 클립보드, 처리, 팝업 메뉴까지 내부적으로 완벽한 처리를 한다.
게다가 자신의 변화를 부모 윈도우에게 통지 메시지로 알려주므로 부모 윈도우도 에디트의 변화에 대해 반응할 수 있다.

그런데 에디트는 키보드 입력에 대한 통지를 하지 않기 때문에 부모 윈도우가 입력되는 키에 대해 간섭할 수 있는 여지가 전혀 없다.
만약 사용자가 에디트에서 엔터키를 눌렀을 때 특별한 처리를 하고 싶다면? 에디트가 입력에 대해 어떤한 통지 메시지도 보내지 않기 때문에
부모 윈도우는 엔터키 입력을 처리할 수 없으며 심지어 사용자가 엔터키를 눌렀는지도 알 수 없다.
이럴때 "서브클래싱"을 이용한다.
>>>SubEdit 예제 참고
- LONG SetWindowLongPtr(변경 윈도우, GWLP_WNDPROC, 서브클래스 프로시저);
↑ 함수를 사용하여 에디트 윈도우의 프로시저를 변경하였다.

- LRESULT CallWindowProc(WNDPROC, lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
↑ 함수를 사용하여 서브 클래싱을 할 때 가로채는 메시지 이외의 메시지들은 기존의 Edit 프로시저에서 처리되도록 한다.

서브 클래스의 프로시저는 어떠한 일이 있어도 여분 메모리(cbWndExtra, cbClsExtra가 지정한 메모리)를 건드려서는 안 된다.
문법적으로 SetWindowLongPtr()을 함수를 호출하면 분명히 가능은 하지만 
여분 메모리는 그 윈도우가 자신의 고유한 목적을 위해 할당한 메모리 영역이며 여분 메모리가 어떤 의미로 사용되고 있는지는
그 클래스를 만든 사람이 공개하지 않는 한 정확하게 알 수 없다. (필요하다면 윈도우 프로퍼티를 쓰자!!)
>>> EditNoCopy 예제처럼 클립보드 사용을 완전히 금지 시킬 수 있다.
(WM_CONTENTMENU는 마우스 우측 클릭 시 열리는 팝업 메뉴임.)


[전역 서브클래싱]
서브클래싱도 시점과 방법, 그리고 효과가 미치는 범위에 따라 다음 두 가지로 분류된다.
인스턴스 서브클래싱 : 윈도우가 만들어진 후 그 윈도우 하나에 대해서만 윈도우 프로시저를 교체하는 것이다.
따라서 이후에 만들어지는 윈도우는 이 서브클래싱의 영향을 전혀 받지 않는다. 특정 윈도우 하나에 대해서만
윈도우 프로시저를 교체하는 것이므로 SetWindowLongPtr 함수가 사용된다.

전역 서브클래싱 : 특정 윈도우에 대해서 서브클래싱을 하는 것이 아니라 윈도우 클래스에 대해 서브클래싱 하는 것이다.
윈도우 클래스의 WNDCLASS 구조체를 직접 변경하며 이때는 SetClassLongPtr 함수가 사용된다.
만들어진 윈도우에 대해서는 전혀 효과가 없으며 앞으로 만들어질 윈도우만 영향을 받는다.
>>>> SubEdit 예제의 경우 인스턴스 서브클래싱을 했는데 이부분을 변형하여 전역 서브클래싱을 하도록 해보자.(SubEdit2)

전역 서브클래싱 시...
기본적으로 윈도우 클래스는 각 프로세스에 대해 지역적이다.
시스템 전역 클래스에 대한 정보는 시스템이 갖고 있지만 응용 프포그램이 시작될 때 시스템으로 전달받는 복사본일 뿐이다.
따라서 "edit", "listbox" 클래스를 맘대로 뜯어 고쳐 봐야 다른 프로세스는 이에 대한 영향을 받지 않는다.

[슈퍼클래싱]
서브클래싱과 비슷한 기법이다.
기존 클래스(베이스 클래스)의 정보를 바탕으로 하여 완전히 새로운 클래스를 만드는 것이다.
슈퍼클래싱에 의해 새로 만들어진 윈도우 클래스는 베이크 클래스와 동일하지만 
여기에 변화를 주면 원하는대로 윈도우 클래스를 수정할 수 있다.
단 이유는 정확하게 공개되어 있지 않지만 SCROLLBAR 클래스는 슈퍼클래싱을 해서는 안 된다고 알려져 있다.

슈퍼클래싱의 핵심 함수는 GetClassInfo(Ex) 함수이다.
- BOOL GetClassInfo(HINSTANCE hInstance, LPCTSTR lpClassName, LPWNDCLASS lpWndClass);
: 이 함수는 lpClassName 윈도우 클래스의 정보를 조사하여 lpWndClass가 가리키는 WNDCLASS 구조체에 채운다.
첫번째 인수의 경우 응용 프로그램의 인스턴스 핸들이되 버튼, 에디트 등의 시스템에 의해 만들어진 윈도우 클래스일 경우는
NULL을 주면 된다. 이 함수 호출에 의해 윈도우 클래스의 정보를 조사할 수 있는데 예를 들면
GetClassINfo(NULL, "edit", &WndClass); 함수를 호출하면 "edit" 윈도우 클래스의 정보를 
WndClass 구조체에 복사한다. 이 함수는 등록된 윈도우 클래스의 정보를 다시 돌려받으므로
RegisterClass 함수의 반대 함수라고 생각하면 쉽다.

WndClass 구조체에 윈도우 클래스의 정보가 조사되었으므로 이 구조체로 RegisterClass 함수를 다시 호출하면
조사한 윈도우 클래스를 또 만들 수 있다.
물론 조사한 후 바로 다시 RegisterClass를 호출하는 것은 아무 의미가 없지만 말이다.
>>>> SuperEdit 참조