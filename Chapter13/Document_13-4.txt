[메시지 크래커]
고전적으로 메시지 처리는 switch문을 통해 처리한다.
switch(iMessage)
{
	case message1:
		break;
	case message2:
		break;
		...
}
그러나 처리 해야 할 메시지의 갯수가 많아지면 여러가지로 비효율적이다.
메시지를 처리할 때 별도의 함수에서 처리하면 읽기도 편해지고 
필요한 지역변수를 함수 내부에서 선언해서 사용할 수 있으므로 여러 모로 편리해진다.
OnExample(HWND, WPARAM, LPARAM)형태의 함수로 메시지를 개별적으로 처리 <- 메시지 크래커라고 함

별도의 함수로 분리하는 것은 switch case에 몽땅 집어넣는 것에 비해 속도상 
약간의 불리한 점이 있을 수도 있다. 메시지 발생시마다 함수를 호출해야 하고
그때마다 스택을 재할당해야 하니까 말이다. 함수가 많아지면 프로그램의 크기에도 불리하다.
하지만 초당 평균 20억~40억 개 이상의 명령을 처리하는 CPU속도를 감안한다면 이 정도 속도 손실은 무시할 만하다.

여기서 좀 더 개선해보면
wParam과 lParam에 포함된 추가 정보를 쓰기 편하게 추출해서 인수로 제공하면 함수 내부에서
쓰기 편하도록 수정해보자
>>>> MsgCrk 참고


[windowsx.h]
메시지 크래커는 컴파일러가 지원하는 것도 아니고 C언어 명세에 있는 것도 아니다.
다만 Windowsx.h라는 헤더 파일에 정의되어 있는 아주 단순한 매크로 구문일 뿐이다.

#define HANDLE_MSG(hwnd, message, fn) \
	case (message):
		return HANDLE_##message((hwnd), (wParam), (lParam), (fn))

HANDLE_MSG 매크로는 switch문 내에서 사용되므로 일단 case문이어야 한다.
case (message):으로 이 메시지가 전달되었을 경우를 먼저 점검해 본다.
그리고 HANDLE_##message로 정의된 매크로 함수를 다시 호출하며 이 함수로 hWnd, wParam, lParam, fn을 전달한다.
HANDLE_##message 매크로 함수는 메시지별로 정의되어 있는데 
대표적으로 WM_SIZE 메시지에 대한 매크로문을 분석해 보자.

#define HANDLE_WM_SIZE(hwnd, wParam, lParam, fn) \
	((fn)(hwnd), (UINT)(wParam), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam)), 0L)

이 매크로는 fn 함수를 호출하되 이때 인수로 hWnd, wParam, lParam의 하위, 상위 워드 네 개가 전달된다.
이 매크로에 대응되는 함수 fn은 다음 원형으로 작성하면 된다.

void Cls_OnSize(HWND hwnd, UINT state, int cx, int cy)
여기서 Cls는 메시지를 받을 윈도우의 이름으로 대체하는데 예제에서는 Cls대신 메인 윈도우명인 MsgCrk_OnSize로 이름을 변경했다.
매크로를 전개하면 결국 WM_SIZE 메시지가 발생했을 때 wParam, lParam으로부터 필요한 정보를 추출하여 이 함수를 호출하는 문장이다.
WndProc의 HANDLE_MSG(hWnd, WM_SIZE, MsgCrk_OnSize) 구문을 모두 전개했을 떄 다음과 같이 된다.
case WM_SIZE:
	return Cls_OnSize(hwnd, wParam, LOWORD(lParam), HIWORD(lParam));

-> 결국 이 구문을 만드는 것이 메시지 크래커가 하는 일이다.
wParam, lParam으로부터 정보를 추출하는 문장이 매크로 함수에 모두 작성되어 있으므로 메시지 크래커를 사용한다면
더 이상 wParam, lParam의 의미에 대해 신경쓸 필요없이 오로지 메시지 크래커가 
전달해 주는 state, cx, cy 인수만 잘 사용하면 된다.

HANDLE_WM_SIZE 매크로의 제일 뒤에 있는 ,0는 리턴값을 무조건 0으로 한다는 뜻인데
여기서 콤마는 구두점이 아니라 좌ㅁ변을 먼저 평가하고 우변을 리턴하는 연산자이다.

메시지 크래커는 메시지별로 무조건 함수 하나씩을 작성하는 것이 아니라 비슷한 함수는 핸들러를 통합하기도 한다.
예를 들어 WM_KEYDOWN과 WM_KEYUP은 파라미터 구조가 동일하므로 한 함수에서 처리하는 것이 더 편리할 수도 있다.
이때 두 메시지의 구분을 위래 fDown이라는 별도의 인수를 전달한다.
마우스 누름, 더블클릭도 마찬가지로 통합되어 있다.
C언어의 매크로 전개와 매크로 함수에 대한 기본적인 이해만 하고 있다면
메시지 크래커를 이해하는데 별 문제가 없을 것이다.

그렇다면 메시지 크래커를 실제 업무에 적용시킬 때는 어떤 순서대로 작업해야 할까?

1. WndProc에 처리하고자 하는 메시지에 대해 HANDLE_MSG 매크로 구문을 삽입한다.
처리하고자 하는 메시지와 함수명을 짝짓기만 하면 된다. 예를 들어 WM_SIZE 메시지를 처리하고 싶다면
HANDLE_MSG(hWnd, WM_SIZE, MsgPrg_OnSize);라고 적는다.

2. 함수의 본체를 만든다. 메시지 처리 함수의 원형은 Windowsx.h에 주석으로 기록되어 있다.
다음은 WM_SIZE 메시지에 대한 처리 함수 원형이다.
주석으로 처리된 부분을 복사해서 ClsMyPrg 등의 이름으로 바꾼다. 그리고 함수의 본체 코드를 작성한다.

/* void Cls_OnSize(HWND hwnd, UINT state, int cx, int cy) */
#define HANDLE_WM_SIZE(hwnd, wParam, lParam, fn) \
	((fn)((hwnd), (UINT)(wParam), (int)(short)LOWORD(lParam), (int)(short)HIWORD(lParam)), 0L)

3. 핸들러 함수의 원형을 선언하면 작업이 완료된다.

※ 메시지 크래커 매크로 함수 선언부에 ##이라는 전처리기가 사용되었는데 C를 좀 한다는 사람도
##에 대해서는 잘 모르는 경우가 있어 약간의 보충 설명이 필요할 것 같다.
##은 매크로나 typedef 문과 함께 사용되며 매크로 치환이 끝난 후 그 자신은 주변의 공백과 함께 스스로 제거되는 기능을 한다.
예를 들어 [#define VAR(a, b) a##b]라고 정의되었을 경우 VAR(dog, baby)-> dog##baby로 치환된 후,
##이 제거됨으로써 dogbaby가 된다.


[컨트롤 제어]
메시지 크래커의 또 다른 기능으로 컨트롤을 제어하는 매크로 구문들이 있다.
부모 윈도우는 컨트롤에게 명령을 내리기 위해 BM_GETCHECK, LB_ADDSTRING 등의 메시지를 SendMessage 함수로 보낸다.
이 방법 대신 정의된 매크로 구문을 쓸 수도 있다.
#define Button_GetCheck(hwndCtl)
	((int)(DWORD)SNDMSG((hwndCtl), BM_GETCHECK, 0L, 0L))
#define Edit_LimitText(hwndCtl, cchMax)
	((void)SNDMSG((hwndCtl), EM_LIMITTEXT, (WPARAM)(cchMax), 0L))
#define Edit_GetText(hwndCtl, lpch, cchMax)
	GetWindowText((hwndCtl), (lpch), (cchMax))
#define ListBox_AddString(hwndCtl, lpsz)
	((int)(DWORD)SNDMSG((hwndCtl), LB_ADDSTRING, 0L,
	(LPARAM)(LPCTSTR)(lpsz)))
#define ListBox_GetCount(hwndCtl)
	((int)(DWORD)SNDMSG((hwndCtl), LB_GETCOUNT, 0L, 0L))

이 경우도 메시지로 보내는 인수를 매크로의 인수로 대체해 놓았기 때문에 원형을 익힌 사람은 훨씬 더 편하게 쓸 수 있다.
특정 메시지의 wParam, lParam에 대한 정보를 얻기 위해 항상 레퍼런스를 뒤지지 않아도 된다.
아무래도 ListBox_AddString(hList, "String"); 이라는 구문이 SendMessage를 직접 쓰는 것보다는 훨씬 더 인간적이다.
이 매크로 구문들도 모두 Windowsx.h에 정의되어 있으며 매크로 구문만 읽어 보면 의미를 금방 알 수 있다.


[메시지 크래커의 장단점]
MFC를 해 본 사람은 MFC의 메시지 맵이 무척 편리하다는 것을 느꼈을 것이다.
어떤 메시지를 처리하겠다는 최소한의 의사 표현만 하면 원형 선언, 메시지 맵 추가, 핸들러 함수 작성까지
자동으로 이루어지며 코드를 작성할 위치로 이동하는 친절한 서비스까지 해 준다.
메시지 크래커는 MFC의 메시지 맵을 흉내내서 만든 것이며 메시지 맵의 장점을 거의 그대로 가지고 있다.
코드를 읽기 쉽고 유지, 보수가 편리하며 실수를 방지하고
인수의 의미를 쉽게 알 수 있도록 해주는 등의 장점은 이미 앞에서 직접 경험해 보았다.

이 외에 마이크로소프트가 자랑하는 메시지 크래커의 큰 장점중의 하나는 이식에 유리하다는 점이다.(Protability)
운영체제가 업그레이드되면 메시지의 추가 정보가 바뀔 수도 있는데 메시지 크래커는 
이런 변화에 충분히 대응할 수 있도록 작성되어 있다. 직접 wParam, lParam에서 추가 정보를 얻었을 경우
인수의 의미가 바뀌면 코드를 다시 작성해야 하지만 메시지 크래커를 썼다면 메시지 크래커가
운영체제의 변경사항을 반영하여 다시 배포될 것이므로 소스는 손대지 않아도 다시 컴파일하기만 하면 될 것이다.
그러나 이 장점은 어디까지나 광고 문구에 불과하다. 메시지의 파라미터의 의미는 
운영체제를 제작한 회사 입장에서도 함부로 바꿀 수 있는 대상이 아니다.
메시지 크래커는 장점만큼이나 단점도 만만치 않게 많이 가지고 있다.
다음은 내가 생각하는 메시지 크래커의 단점인데 다분히 개인적인 개성과 주관이 개입되었음을 밝힌다.

1. 메시지 크래커를 사용하려면 항상 Windowsx.h를 참고해야 한다.
메시지 처리 함수의 원형을 외우고 다닐 수는 없기 때문에 헤더 파일에서 함수 원형을 복사해 오는 방법밖에 없다.
MFC처럼 개발툴이 메시지 맵을 직접 지원한다면 아주 편리하겠지만 아직까지 메시지 크래커를 지원하는
개발툴은 없다. 일단 만들어 놓으면 편하지만 새 메시지를 추가하기가 쉽지 않다.

2. 안타깝게도 기존 지식과 배치되는 점이 있다.
WM_CREATE 메시지는 초기화를 무사히 했을 경우 0을 리턴하고 에러가 발생했을 경우는 -1을 리턴한다.
그런데 메시지 크래커의 OnCreate 함수는 BOOL 형으로 되어 있으면 return 0이 return FALSE로 
해석되어 생성을 중지하라는 의미가 되어버린다.
WIN32 API의 0, -1을 좀더 인간적이고 이해하기 쉬운 TRUE, FALSE로 바꾸려 하다보니
이렇게 된 것인데 이를 미리 숙지하지 못할 경우 엉뚱한 코드를 작성할 위험이 있다.

3. 메시지 크래커를 제대로 사용하려면 또 다른 함수 집합을 익혀야 한다.
리스트 박스에 LB_ADDSTRING 메시지를 보내면 문자열이 추가된다는 것을 이미 알고 있는데 
ListBox_AddString이라는 함수를 같이 익혀야 한다. 그렇지 API 함수의 수가 너무 많아 골치가 아픈데
좀 편하자고 새 형식의 함수를 익히는 것보다는 차라리 기존 방법을 사용하는 것이 더 나을 것 같다.
SelectObject 함수 하나만 알면 펜, 브러시, 폰트를 모두 선택할 수 있는데 굳이 SelectPen, SelectBrush, SelectFont라는
이상한 함수를 만들어 놓을 필요가 뭐가 있겠는가 말이다.
이 함수들은 단순한 매크로 함수인데 초보자들은 이 함수를 Win32 API 함수로 오해하게 될것이다.
SelectPen, SelectBrush 등의 함수는 다른 개발툴에는 존재하지 않는다.

4. 소스의 길이가 길면 길수록 메시지 크래커의 가치가 더 빛나 보이지만
반대로 짧은 예제의 경우는 오히려 더 번거로와질수도 있다. WndProc이 불과 20~30줄 정도라면 단순한 switch case문이
훨씬 더 읽기 편하고 소스를 작성하기도 편리하다.

게다가 일부 매크로에 버그까지 있는데 마이크로소프트는 이 버그를 분명히 할고 있겠지만
개발툴이 업그레이드되어도 여전히 고치지 않고 있다.
즉, 지원의지가 없는 것이다. 메시지 크래커를 쓸 것인가 말 것인가는 어디까지나 개인적인 기호에 따라 선택할 문제일 뿐이다.
(실제 프로젝트에서는 꽤 많은 도움이 된다.)

그러나 API 자체도 잘 모르면서 처음부터 편하자고 메시지 크래커로만 코드를 작성하는 것은 공부하는 자세가 아니라고 생각한다.
메시지 크래커는 API를 잘 아는 사람이 좀 더 편하게 쓰기 위해 존재하는 것일 뿐이다.