[MFC 프로젝트 생성]
"MFCExam" 이라는 이름으로 프로젝트 생성 후,
AppWizard가 만들어주는 기본 골격 코드를 프레임워크(FrameWork)라고 하며
기본 코드는 물론이고 확장을 위한 모든 지원을 다 포함하고 있다.


[간단한 설명]
MFCExam.cpp에 가보면 theApp이라는 전역변수 선언문이 있다.
MFC프로젝트의 WinMain은 프레임워크 내부에 숨겨져 있어 우리가 직접 만들지 않아도 된다.
대신 프레임워크는 theApp이 생성될 때 InitInstance 멤버 함수를 호출하여 이 함수에서 필요한 초기화를 할 수 있도록 한다.
MainFrm로부터 파생되는 메인 프레임은 메인 윈도우가 되며,
MFCExamDoc([ProjectName]Doc)는 프로그램이 관리하는 데이터를 저장하고,
MFCExamView([ProjectName]View)는 윈도우의 출력을 담당한다.

그래서 저장할 데이터가 있다면 MFCExamDoc을 수정하면 되고, 화면 출력을 변경하고 싶다면 MFCExamView를 프로그래밍 하면 된다.
View클래스의 메서드 중 OnDraw()가 있는데 이는 View가 WM_PAINT 메시지를 받으면 이 함수를 호출하도록 되어 있다.


[MfcKey 추가내용]
- 4장에서 했던 Key 예제를 MFC 버전으로 작성
WM_PAINT 메시지 발생 시 처리하는 핸들러가 바로 OnDraw(HDC) 메서드였다.
OnDraw() 메서드 안에서 pDoc라는 Document클래스 포인터를 통해 프레임워크가 정보를 읽기 위해 대입하는 코드가 미리 작성되어 있다.
View 클래스에서는 출력 뿐만아니라 입력도 담당한다.


[MfcInfoDlg 추가내용]
- 8장에서 했던 InfoDlg 예제를 MFC 버전으로 작성
DoDataExchange() 함수에서 컨트롤과 멤버 변수와의 값을 자동으로 교환하는 DDX 작업을 담당한다.
DDX 코드는 일종의 매크로 구문이기 때문에 이해하기 쉽지 않다.
해당 예제에서 Get(Set)DlgItemText(Text) 함수로 수행했던 작업을 MFC 프레임워크가 자동으로 관리한다고 생각하면 된다.

AppWizard가 생성하는 프레임워크는 미리 만들어진 구조이며 치밀하게 작성되어 있다.
그릴 때는 OnDraw(), 뷰를 초기화할 때는 OnInitialUpdate(), 메뉴 항목을 관리할 때는 OnUpdateCommandUI(),
문서를 초기화할 때는 DeleteContent() 가상함수를 재정의해야 한다.
MFC공부의 주요 과제는 구조를 익혀 코드를 작성할 위치를 정확하게 파악하는 것이다.


우리의 프로젝트들은 ApiStart.txt 파일의 내용을 복사했다. 리소스가 필요하면 리소스 스크립트를 추가하고 필요한 리소스를 작성했다.
ApiStart.txt에서는 WM_CREATE, WM_PAINT드엥 대한 기본 코드가 이미 작성되어 있고, 
이 자리에 원하는 코드를 써 넣으면 원하는 프로그램이 만들어진다.
프로젝트를 처음 시작하는 이 작업은 정해져 있으며 누가 하더라도 항상 동일한 과정을 거쳐야 한다. 
창조적이고도 개성있는 어떤 작업이 전혀 필요치 않다.
AppWizard가 만드는 프레임워크도 마찬가지다.

AppWizard가 하는 작업이 미리 정해진 작업이라고 하지만, 이 코드는(MS 프로그래머가 작성한 코드) 굉장히 정교하기 때문에 
이 골격 코드에 살을 붙여 원하는 프로그램을 만들기가 아주 수월하다.
MFC의 기본 구조를 조금만 알고 나면 누구든지 프레임워크에 코드를 추가해 넣을 수 있다.

MFC는 윈도우즈 프로그래밍의 일반적인 요소들을 모두 클래스로 정의한다. 그리고 필요한 기능은
클래스의 멤버 함수로 만들어 두었다. 예를 들어 화면 출력을 담당하는 DC는 CDC 클래스로 정의되며
LineTo, Elipse, Rectangle 등의 함수들이 이 클래스의 멤버 함수들이다.
CDC 클래스와 그 멤버 함수들을 사용하면 화면 출력을 할 수 있다.

MFC는 API를 기반으로 한다. MFC의 멤버 함수들은 대부분 API 함수를 다시 호출함으로써 해당 기능을 수행하는 Wrapper 함수들이다.
사용자가 굳이 몰라도 되거나 디폴트를 취할 수 있는 인수들은 멤버 함수 내부에서 알아서 처리한다.
ex)TextOut(HDC, int, int, TCHAR) -> pDC->TextOut(int, int, CSTRING)


[MSDN(Microsoft Developer Network)]


[빌드 속도 개선]
Windows.h에는 windef.h, winnt.h, wingdi.h 등의 모듈별 헤더 파일이 전부 포함되어 있어서
Windows.h만 include하면 된다. 그러나 많은 헤더파일들이 포함되어 있기 때문에 컴파일 시간이 오래걸린다는 단점이 있다.
그래서 헤더 파일은 컴파일에서 제외할 수 있는 조건부 컴파일 매크로를 제공한다.
-> WIN32_LEAN_AND_MEAN 매크로이다.
이 매크로를 Windows.h 헤더 파일을 include 하기 전에 이 매크로를 정의해 놓으면 자주 사용되는 것만 컴파일하도록 되어 있다.

ex)
#include <windef.h>
#include <winbase.h>
#include <wingdi.h>
#include <winuser.h>

#ifndef WIN32_LEAN_AND_MEAN
#include <dde.h>
#include <rpc.h>
#include <shellapi.h>
#include <winsock.h>
#include <wincrypt.h>
#include <commdlg.h>
#include <ole.h>
#endif /* WIN32_LEAN_AND_MEAN */

windef.h, winbase.h 등의 헤더 파일은 윈도우즈 프로그램이라면 항상 필요로 하는 타입 정의를 가지고 있으므로 무조건 포함된다.
그러나 dde.h, rpc.h 같은 고급 기능에 대한 헤더 파일은 WIN32_LEAN_AND_MEAN 매크로가 정의되어 있지 않을 때만 포함하도록 되어 있다.
디폴트로 이 매크로는 정의되지 않으므로 모든 헤더 파일이 일단 포함되지만 다음과 같이 Windows.h를 include 하기 전에 
매크로를 정의하면 조건부 컴파일 블록 안에 있는 헤더 파일은 제외된다.
이렇게 되면 꼭 필요한 헤더 파일만 포함하고 고급 기능은 포함하지 않음으로써 컴파일 속도가 향상될 것이다.

비슷하게 VC_EXTRALEAN이라는 매크로도 있는데 이 매크로는 MFC 라이브러리에서 사용된다.
VC_EXTREALEAN 매크로가 정의되어 있으면 WIN32_LEAN_AND_MEAN과 NOIME, NOSOUND, NOCOMM 등의
매크로를 추가로 정의하여 빌드 속도가 더 빨라진다.

AppWizard로 만든 MFC 프로젝트는 VC_EXTREALEAN을 기본적으로 정의한다.
그러나 지금은 하드웨어 성능도 좋아지고, 한번 컴파일하면 컴파일된 헤더 파일을 사용하므로 굳이 이정도 까지 할 필요는 없다.


[STRICT 매크로]
윈도우즈에서 HWND, HDC, HPEN 등 핸들을 굉장히 많이 사용하는데 각각의 핸들은 가리키는 대상이 다르다.
윈도우 핸들 변수 hWnd에 DC의 핸들을 대입하면 의미도 없을 뿐더러 위험하고 오류도 나지 않는다.
C문법 수준에서는 대입을 금지할수 없다는 문제가 있다.

STRICT 매크로는 데이터 타입들끼리 구분되도록 하여 소스의 안전성과 이식성을 높이는 역할을 하는데
주로 핸들 타입을 고유하게 정의하며 이 외에 콜백함수나 포인터의 타입을 고유하게 정의하기도 한다.
윈도우즈의 기본 타입을 정의하는 windef.h 헤더 파일에서 include하고 있는 minwindef.h 파일 안의 선두에는 다음과 같은 구문이 작성되어 있다.
ex)
#ifndef NO_STRICT
#ifndef STRICT
#define STRICT 1
#endif
#endif /* NO_STRICT */

SDTRICT 매크로가 정의되어 있지 않으면 STRICT를 1로 정의하는데 
여기서 1이라는 값은 별다른 의미는 없고 STRICT를 정의하는 역할만 한다.
위 구문은 STRICT이 정의되어 있지 않을때만 정의한다. 그래서 별다른 조치없이 windef.h를 인클루드하면 STRICT는 자동으로 정의되며
NO_STRICT를 정의한 후 인클루드하면 STRICT는 정의되지 않는다.

STRICT 매크로의 효과는 여러 헤더 파일에서 확인할 수 있는데 타입 정의문들이 이 매크로에 따라 조건부로 컴파일된다.
windef.h에서 include된 winnt.h 헤더파일을 열어보면 다음과 같은 구문을 볼 수 있다.
ex)
#ifdef STRICT
typedef void *HANDLE;
#if 0 && (_MSC_VER > 1000)
#define DECLARE_HANDLE(name) struct name##__; typedef struct name##__ *name
#else
#define DECLARE_HANDLE(name) struct name##__{int unused;}; typedef struct name##__ *name
#endif
#else
typedef PVOID HANDLE;
#define DECLARE_HANDLE(name) typedef HANDLE name
#endif
typedef HANDLE *PHANDLE;

DECLARE_HANDLE 매크로 함수는 name을 받아 이 타입을 정의하는데 STRICT 매크로에 따라 다르게 정의된다.
STRICT가 정의되어 있지 않으면,
|typedef PVOID HANDLE;|
|#define DECLARE_HANDLE(name) typedef HANDLE name|
name은 HANDLE 타입이고 그 HANDLE 타입은 PVOID 타입이 된다.

STRICT가 정의되어 있다면,
#if 0 && (_MSC_VER > 1000)라는 조건에 따라 (약간의 차이)
미사용 정수를 멤버로 가지는 구조체를 선언한 후 이 구조체를 가리키는 포인터 타입으로 선언된다.
핸들 타입들은 모두 이 매크로로 정의되는데 windef.h 헤더파일을 보면 다음과 같이 정의된 문장을 볼 수 있다.
DECLARE_HANDLE(HWND);
DECLARE_HANDLE(HDC);
DECLARE_HANDLE(HBITMAP);
DECLARE_HANDLE(HBRUSH);

HWND 타입을 DECLARE_HANDLE 매크로로 정의하는데 이 타입은 STRICT 매크로의 존재 유무에 따라 달라진다.
STRICT가 없다면 HWND는 PVOID 형이 될 것이고 STRICT 다음 타입이 된다.
(_MSC_VER > 1000 이부분은 ms의 버전에 따라 달라짐을 의미한다. _MSC_VER이 1000 초과라는 의미는
MSVC++ 5.0 이상 Developer Studio 4.2 이상 (초창기 visual studio))
struct HWND__{int unused;}
typedef struct HWND__ *HWND

HWND__ 라는 구조체를 정의하고 HWND는 이 구조체를 가리키는 포인터 타입으로 정의한다.
HDC도 마찬가지로 HDC__라는 구조체 타입이 정의되고 이 구조체를 가리키는 포인터 타입으로 HDC 타입이 정의될 것이다.
이때 HWND__ HDC__는 모양은 같지만 태그가 다르기 때문에 서로 다른 구조체이며 
따라서 HWND와 HDC도 호환되지 않는 타입으로 정의될 것이다.

다음 코드는 NO_STRICT가 정의되지 않으면 ERROR가 난다.
------------------
HWND hWnd = NULL;
HDC hdc;
hWnd = hdc;
------------------

HWND와 HDC가 다른 타입이기 때문에 hWnd에 hdc를 대입할 수 없으며 따라서 컴파일러는 이 문장을 에러로 인식한다.
만약 이 두 타입이 똑같이 PVOID라면 무난하게 대입될 것이며 논리적으로 의미없는 대입이므로 프로그램이 위험해진다.
#define NO_STRICT
#include <Windows.h>

hPen = GetDC(hWnd);
Elipse(hWnd, 1, 2, 3, 4);
ReleaseDC(hdc, hWnd);


[에러 처리]
WinMain 함수의 원형을 보면 정수(int)를 리턴하는 것으로 나오는데
os에서는 이 반환값을 전부 버린다. 그러면 어떤 용도로 쓰는가? 바로 에러 처리 용으로 쓴다.
ex)
hWnd = CreateWindow(...);
if (hWnd == NULL)
{
	return -1;
}

실제 프로그램을 짜는 거라면 이런 Error처리를 반드시 해야한다.
이 프로젝트 에서는 코드의 간결성을 위해 생략하고 있다.